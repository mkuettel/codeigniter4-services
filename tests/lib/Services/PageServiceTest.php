<?php

namespace Tests\Lib\Services;

use CodeIgniter\Test\CIUnitTestCase;
use CodeIgniter\Test\DatabaseTestTrait;
use Tests\Support\Entities\Page;
use Tests\Support\Entities\PageContent;
use Tests\Support\Services\PageService;

class PageServiceTest extends CIUnitTestCase
{
    use DatabaseTestTrait;

    protected $migrate = true;

    protected $namespace = 'Tests\Support';
    protected $seed = \Tests\Support\Database\Seeds\Page::class;

    private ?PageService $pages;

    public function newPage(): Page {
        $page = new Page([
            'page_contents' => [
                 new PageContent([
                    'title' => 'TestPageService',
                    'language' => 'en',
                    'slug' => 'test-page-service',
                    'description' => 'A Test page to test the TestPageService class',
                    'tags' => 'test,page',
                    'contents' => 'these are test contents for the test page'
                ]),
             ]
        ]);
        return $page;
    }

    public function setUp(): void {
        parent::setUp();

        $this->pages = \Tests\Support\Config\Services::pages();
    }

    public function tearDown(): void {
        $this->pages = null;
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testSaveInsert(): void {
        $page = $this->newPage();
        $this->assertTrue($page->hasPageContents());
        $result = $this->pages->save($page);
        $this->assertIsInt($page->id);
        $this->assertTrue($page->hasPageContents());
        $this->assertIsInt($page->getPageContent('en')->id);
    }

    public function testSaveUpdate(): void {
        $page = $this->newPage();
        $this->pages->save($page);
        $this->assertIsInt($page->id);
        $page_content = $page->getPageContent('en');
        $page_content->title = 'updated title';
        $this->pages->save($page);
        $updated = $this->pages->get($page->id);
        $this->assertNotNull($updated);
        $this->assertEquals($page_content->title, $updated->getPageContent('en')->title);
    }

    public function testGet(): void {
        $page = $this->newPage();
        $this->pages->save($page);
        $this->assertIsInt($page->id);
        $saved = $this->pages->get($page->id);
        $this->assertEquals($page->id, $saved->id);
        $this->assertNotEmpty($page->page_contents);
        $this->assertIsList($page->page_contents);
    }

    public function testGetNonExisting(): void {
        $this->assertNull($this->pages->get(0));
    }

    public function testDelete(): void {
        $page = $this->newPage();
        $this->pages->save($page);
        $this->assertIsInt($page->id);

        $found = $this->pages->get($page->id);
        $this->assertNotNull($found);

        $this->pages->delete($found->id);
        $deleted = $this->pages->get($page->id);
        $this->assertNull($deleted);
    }

    public function testDeleteNonExisting(): void {
        $this->assertFalse($this->pages->delete(0));
    }

    public function testSearch(): void {
        $result = $this->pages->search(['title' => ''])->getResult();
        $this->assertIsArray($result);
    }
}
