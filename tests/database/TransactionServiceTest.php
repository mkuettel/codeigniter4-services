<?php

namespace Tests\Database;

use MKU\Services\ServiceException;
use MKU\Services\TransactionException;
use Tests\Support\Entities\Page;
use Tests\Support\Entities\PageContent;
use Tests\Support\Models\PageContentModel;
use Tests\Support\Models\PageModel;
use CodeIgniter\Test\CIUnitTestCase;
use CodeIgniter\Test\DatabaseTestTrait;
use MKU\Services\TransactionService;

class TransactionServiceTest extends CIUnitTestCase {
    use DatabaseTestTrait;

    protected $migrate = true;
    protected $migrateOnce = false;
    protected $refresh = true;

    protected $namespace = 'Tests\Support';

    protected $seed = \Tests\Support\Database\Seeds\Page::class;

    private ?TransactionService $transactions;

    private ?PageContentModel $contents;

    private ?PageModel $pages;

    public function newPage(): Page {
        $page = new Page([
            'contents' => [
                new PageContent([
                    'title' => 'TestTransactionService',
                    'language' => 'en',
                    'slug' => 'test-transaction-service',
                    'description' => 'A Test transaction to test the TestTransactionService class',
                    'tags' => 'test,transaction',
                    'contents' => 'these are test contents for the test transaction'
                ]),
            ]
        ]);
        return $page;
    }
    public function newTransactionService(): TransactionService {
        return new TransactionService($this->config, $this->db);
    }

    public function setUp(): void {
        parent::setUp();

        $this->config = $this->getMockBuilder('MKU\Services\Config\Transaction')->getMock();
        $this->transactions = $this->newTransactionService();
        $this->pages = model(PageModel::class);
        $this->contents = model(PageContentModel::class);
    }

    public function tearDown(): void {
        $this->transactions = null;
        $this->pages = null;
        $this->contents = null;
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testInstantiateUsingServicesClass(): void {
        $transactionService = $this->newTransactionService();

        // if $useShared is true, we should get the exact same instance
        $this->assertEquals($transactionService, $this->newTransactionService());
    }

    public function testTransactCompletes(): void {
        $page = $this->newPage();
        $id = $this->transactions->transact(fn():bool|int => $this->pages->insert($page, true) );
        $this->assertIsInt($id);
        $this->assertEquals($id, $this->pages->find($id)->id);
    }

    public function testTransactThrows(): void {
        $this->expectException(TransactionException::class);
        $this->expectExceptionMessage("Exception during transaction, rolled back");

        $pages = $this->pages;
        $page = $this->newPage();
        $this->transactions->transact(function() use ($pages, $page) {
            $pages->insert($page, true);
            throw new ServiceException("The service irrevocably failed.");
        });
    }

    public function testTransactRollsBackOnThrow(): void {
        $pages = $this->pages;
        $page = $this->newPage();
        try {
            $this->transactions->transact(function() use ($pages, $page) {
                $id = $pages->insert($page, true);
                $this->assertIsInt($id, 'couldnt insert test page');
                throw new ServiceException($id);
            });
        } catch (TransactionException $ex) {
            $id = (int)$ex->getPrevious()->getMessage();
            $this->assertGreaterThan(0, $id);

            $this->assertNull($pages->find($id), "page was saved even though the transaction should have rolled back.");
        }
    }

//    public function testTransactionNests(): void {
//    }

//    public function testTransactionIsolation(): void {
//    }
}
